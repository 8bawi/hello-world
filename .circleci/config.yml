defaults: &defaults
  docker:
    - image:  alpine:latest
# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Declare a dependency on the welcome-orb
  aws-cli: circleci/aws-cli@2.0.3
# Orchestrate or schedule a set of jobs
commands:
#   pipeprint:
#     description: "A command to print the pipeline ID"
#     steps:
#       - run: return 1
  destroy_environment:
    steps:
      - run: 
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}

jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    
    steps:
      - checkout
      - run: 
          name: Create Cloudformation Stack
          command: |
              aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
      - destroy_environment
  get_instance_ip:
    docker:
      - image: amazon/aws-cli
    
    steps:
      - checkout      
      - run:
          name: Add the instance ip to an environment variable
          command: |
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Project,Values=udacity" \
              --output text

              echo 'export $IPOFINSTANCE="$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Project,Values=udacity" \
              --output text)"' >> $BASH_ENV
      - destroy_environment        


  configure_infrastructure:
      docker:
        - image: python:3.7-alpine3.11
      steps:

        - checkout
        - add_ssh_keys:
            fingerprints: ["88:e5:6e:73:64:dd:28:93:ee:be:02:9d:5a:f9:5b:af"]
        - run: 
            name: Install dependencies
            command: |
              apk add --update ansible
        - run:
            name: Configure server
            command: |
              echo $IPOFINSTANCE
              touch inventory.txt
              echo '[all]' >> inventory.txt
              echo $IPOFINSTANCE>> inventory.txt
              ansible-playbook -i inventory.txt main.yml
        - destroy_environment            

workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      - create_infrastructure
      - get_instance_ip:
          requires:
            - create_infrastructure
      - configure_infrastructure:
          requires:
            - get_instance_ip

